#!/usr/bin/env node

/**
 * Test script to verify home page to nominees navigation works correctly
 */

const API_BASE = process.env.VERCEL_URL 
  ? `https://${process.env.VERCEL_URL}`
  : 'http://localhost:3000';

async function testNavigation() {
  console.log('üß™ Testing Home to Nominees Navigation');
  console.log('=====================================');
  
  try {
    // Test 1: Verify home page categories structure
    console.log('\n1. Testing home page categories structure...');
    
    // These are the categories that should be available from the home page
    const homePageCategories = [
      // Role-Specific Excellence
      'top-recruiter',
      'top-executive-leader', 
      'rising-star-under-30',
      'top-staffing-influencer',
      'best-sourcer',
      
      // Innovation & Technology
      'top-ai-driven-staffing-platform',
      'top-digital-experience-for-clients',
      
      // Culture & Impact
      'top-women-led-staffing-firm',
      'fastest-growing-staffing-firm',
      'best-diversity-inclusion-initiative',
      'best-candidate-experience',
      
      // Growth & Performance
      'best-staffing-process-at-scale',
      'thought-leadership-and-influence',
      'best-recruitment-agency',
      'best-in-house-recruitment-team',
      
      // Geographic Excellence
      'top-staffing-company-usa',
      'top-staffing-company-europe',
      'top-global-recruiter',
      
      // Special Recognition
      'special-recognition'
    ];
    
    console.log(`üìã Testing ${homePageCategories.length} home page categories...`);
    
    let workingCategories = 0;
    let categoriesWithData = 0;
    
    for (const category of homePageCategories) {
      try {
        const apiUrl = `${API_BASE}/api/nominees?category=${category}&_t=${Date.now()}`;
        const response = await fetch(apiUrl, {
          cache: 'no-store',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
          },
        });
        
        if (response.ok) {
          workingCategories++;
          const result = await response.json();
          const count = result.data?.length || 0;
          
          if (count > 0) {
            categoriesWithData++;
            console.log(`‚úÖ ${category}: ${count} nominees`);
          } else {
            console.log(`‚ö†Ô∏è  ${category}: API works but no data`);
          }
        } else {
          console.log(`‚ùå ${category}: HTTP ${response.status}`);
        }
      } catch (error) {
        console.log(`‚ùå ${category}: ${error.message}`);
      }
    }
    
    console.log(`\nüìä Summary:`);
    console.log(`- Working APIs: ${workingCategories}/${homePageCategories.length}`);
    console.log(`- Categories with data: ${categoriesWithData}/${homePageCategories.length}`);
    
    // Test 2: Test the most common user flow
    console.log('\n2. Testing common user flows...');
    
    const commonFlows = [
      { category: 'top-recruiter', label: 'Top Recruiters' },
      { category: 'top-executive-leader', label: 'Top Executive Leaders' },
      { category: 'rising-star-under-30', label: 'Rising Stars (Under 30)' }
    ];
    
    for (const flow of commonFlows) {
      console.log(`\nüîó Testing flow: Home ‚Üí ${flow.label}`);
      
      // Simulate the exact URL that would be generated by CategoryCard
      const frontendUrl = `${API_BASE}/nominees?category=${flow.category}`;
      const apiUrl = `${API_BASE}/api/nominees?category=${flow.category}&_t=${Date.now()}`;
      
      console.log(`   Frontend URL: ${frontendUrl}`);
      console.log(`   API URL: ${apiUrl}`);
      
      try {
        const response = await fetch(apiUrl, {
          cache: 'no-store',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
          },
        });
        
        if (response.ok) {
          const result = await response.json();
          const count = result.data?.length || 0;
          
          if (count > 0) {
            console.log(`   ‚úÖ Success: ${count} nominees found`);
            
            // Verify all nominees are in the correct category
            const wrongCategory = result.data.find(n => n.category !== flow.category);
            if (wrongCategory) {
              console.log(`   ‚ùå Data integrity issue: Found ${wrongCategory.name} in wrong category (${wrongCategory.category})`);
            } else {
              console.log(`   ‚úÖ Data integrity: All nominees correctly categorized`);
            }
          } else {
            console.log(`   ‚ö†Ô∏è  No nominees found for ${flow.category}`);
          }
        } else {
          console.log(`   ‚ùå API failed: HTTP ${response.status}`);
        }
      } catch (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
      }
    }
    
    // Test 3: Test edge cases
    console.log('\n3. Testing edge cases...');
    
    // Test invalid category
    try {
      const invalidResponse = await fetch(`${API_BASE}/api/nominees?category=invalid-category&_t=${Date.now()}`);
      if (invalidResponse.ok) {
        const result = await invalidResponse.json();
        console.log(`‚úÖ Invalid category handling: Returns ${result.data?.length || 0} nominees (should be 0)`);
      }
    } catch (error) {
      console.log(`‚ùå Invalid category test failed: ${error.message}`);
    }
    
    // Test empty category
    try {
      const emptyResponse = await fetch(`${API_BASE}/api/nominees?category=&_t=${Date.now()}`);
      if (emptyResponse.ok) {
        const result = await emptyResponse.json();
        console.log(`‚úÖ Empty category handling: Returns ${result.data?.length || 0} nominees (should be all)`);
      }
    } catch (error) {
      console.log(`‚ùå Empty category test failed: ${error.message}`);
    }
    
    console.log('\nüéâ Navigation test completed!');
    console.log('\nüìù If users are still experiencing issues, check:');
    console.log('- Browser cache (hard refresh with Ctrl+F5)');
    console.log('- JavaScript console for errors');
    console.log('- Network tab to see if API calls are being made');
    console.log('- URL bar to confirm category parameter is present');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    process.exit(1);
  }
}

// Run the test
testNavigation();