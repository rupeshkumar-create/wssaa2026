#!/usr/bin/env node

/**
 * Test Sync Properties
 * Test the exact properties being generated by our mapping functions
 */

require('dotenv').config({ path: '.env.local' });

// Import mapping functions (we'll need to handle the module import differently)
async function testSyncProperties() {
  console.log('üîß Testing sync properties...');
  
  // Simulate the mapping functions locally to see what properties are generated
  function contactProps(input) {
    const props = {
      email: input.email,
      source: 'WSA26',
      source_detail: 'WSS26',
      wsa_year: 2026,
      ...input.extras,
    };

    // Only set non-empty values to avoid overwriting existing data
    if (input.firstname) props.firstname = input.firstname;
    if (input.lastname) props.lastname = input.lastname;
    if (input.jobtitle) props.jobtitle = input.jobtitle;

    // Set LinkedIn at the configured property key
    if (input.linkedin) {
      const linkedinKey = process.env.HUBSPOT_CONTACT_LINKEDIN_KEY;
      if (linkedinKey) {
        props[linkedinKey] = input.linkedin;
      }
    }

    // Role will be merged in the upsert function
    props.wsa_role = input.role;

    return props;
  }

  function nominatorContactProps(nominator) {
    const [firstname, ...lastnameParts] = nominator.name.split(' ');
    const lastname = lastnameParts.join(' ');

    return contactProps({
      email: nominator.email,
      firstname,
      lastname: lastname || undefined,
      linkedin: nominator.linkedin,
      role: 'Nominator',
      extras: {
        ...(nominator.company && { company: nominator.company }),
        ...(nominator.nominatedDisplayName && { wsa_nominated_display_name: nominator.nominatedDisplayName }),
        ...(nominator.status && { wsa_nominator_status: nominator.status }),
      },
    });
  }

  // Test nominator properties
  console.log('\n1Ô∏è‚É£ Testing nominator properties...');
  const nominatorData = {
    email: 'unique.nominator@example.com',
    name: 'Test Nominator',
    company: 'Test Corp',
    linkedin: 'https://linkedin.com/in/test-nominator',
    nominatedDisplayName: 'Test Nominee',
    status: 'submitted'
  };

  const nominatorProps = nominatorContactProps(nominatorData);
  console.log('Nominator properties:', JSON.stringify(nominatorProps, null, 2));

  // Test creating contact with these properties
  console.log('\n2Ô∏è‚É£ Testing contact creation with nominator properties...');
  const token = process.env.HUBSPOT_TOKEN;
  
  const createData = {
    properties: nominatorProps
  };

  console.log('Sending to HubSpot:', JSON.stringify(createData, null, 2));

  const response = await fetch('https://api.hubapi.com/crm/v3/objects/contacts', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(createData)
  });

  console.log('Response status:', response.status);
  
  if (response.ok) {
    const result = await response.json();
    console.log('‚úÖ Contact created successfully, ID:', result.id);
  } else {
    const errorText = await response.text();
    console.log('‚ùå Contact creation failed:', errorText);
    
    try {
      const errorJson = JSON.parse(errorText);
      console.log('Error details:', JSON.stringify(errorJson, null, 2));
    } catch (e) {
      console.log('Could not parse error as JSON');
    }
  }
}

testSyncProperties();